"""
CSC 111: Final Project
Author: Elizabeth Muirhead
A program to make the Frogger Game
"""

from graphics import *
import random

# GLOBALS

WIDTH = 1200
HEIGHT = 800

# draws the road
def draw_road(window):

    # sets the two boundries for the road
    road_line1 = int(HEIGHT * (.2))
    road_line2 = int(HEIGHT * (.6))

    # draws street in window and makes it gray
    street = Rectangle(Point(0, road_line1), Point(WIDTH, road_line2))
    street.setFill("slate gray")
    street.draw(window)

    # passes road_lines into function that draws the yellow dividers
    street_lines(road_line1, road_line2, window)
    
# draws yellow dividers 
def street_lines(road_line1, road_line2, window):

    center = int((road_line1 + road_line2)/2)

    # draws yellow lines based on length of the road
    for i in range(0, WIDTH, 30):
        rectangle_one = Polygon(Point(i, center-3), Point(i+20, center-3), Point(i+20, center-10), Point(i, center-10))
        rectangle_one.setFill("yellow")
        rectangle_one.draw(window)

        rectangle_two = Polygon(Point(i, center+3), Point(i+20, center+3), Point(i+20, center+10), Point(i, center+10))
        rectangle_two.setFill("yellow")
        rectangle_two.draw(window)

'''This class creates the beagle object, draws in in the window, and moves it with each click.
It also checks if there's a collision and subtracts a life. It checks if the object made it
across the road. It also has a function to return the number of lives'''
class Beagle:

    # constructor
    # initializes the number of lives and points
    # initializes the two banners
    def __init__(self, x, y, banner, banner2):
        
        filename = "beagle.gif"  
        self.beagle = Image(Point(x,y), filename)
        self.points = 0
        self.lives = 3
        self.banner = banner
        self.banner2 = banner2

    # draws beagle
    def create(self, win):

        self.beagle.draw(win)

    # moves beagle
    def beagle_move(self, click):

        self.y = click.getY()

        # if click is above road, object moves up
        if self.y < HEIGHT*0.2:
            self.beagle.move(0, -80)

        # if click is below road, object moves down           
        if self.y > HEIGHT*0.6:
            self.beagle.move(0, 80)

    # checks if car and beagle are at the same point and moves it
    def collision(self,car_x, car_y, back, win):

        location = self.beagle.getAnchor()

        self.beagle_x = location.getX()
        self.beagle_y = location.getY()

        # checks if car is too close to dog
        if car_x in range(int(self.beagle_x-70), int(self.beagle_x+70)) and car_y in range(int(self.beagle_y-80), int(self.beagle_y+80)):
            # subtracts a life 
            self.lives -= 1
            # undraws the old banner and redraws it with the updated number of lives
            self.banner2.text.undraw()
            self.banner2.text = Text(Point(WIDTH/2, 45), ("Number of Lives:", self.lives))
            self.banner2.draw(win)
            # moves dog back to start
            self.beagle.move(0, back)

    # checks if beagle made it across the road
    def across(self, win):

        location = self.beagle.getAnchor()
        self.y = location.getY()

        # checks if dog makes it across
        if self.y < 75:
            # adds a point
            self.points += 1
            # undraws the old banner and redraws it with the updated number of points
            self.banner.text.undraw()
            self.banner.text = Text(Point(WIDTH/2, 20), ("Number of Points:", self.points))
            self.banner.draw(win)
            # moves beagle back to start
            self.beagle.move(0, HEIGHT-150)

    # returns the number of lives
    def get_lives(self):
        return self.lives

'''Banner class creates the banner and has a function to draw it. It will be drawn
and redraws to update the values'''
class Banner:
    
    def __init__(self, message):
        
        self.text = Text(Point(WIDTH/2, 20), message)
        self.text.setSize(20)
        
    def draw(self, win):

        self.text.draw(win)
        self.text.setSize(20)
        
'''The Car class takes an X and a Y value. X and Y can be used to create a
car objects, draw the car objects on a window, and move the car objects.
The speed are direction are based on parameters that can be passed in. The
class also has getter funtions to get the position of a car object.'''

class Car:

    # constructor
    # initalize our instance variables
    def __init__(self, x, y):
        
        p1 = Point(x-70,y-30)
        p2 = Point(x+70, y+30)

        # tells the car that it has a body
        body = Rectangle(p1, p2)
        top = Polygon(Point(x-50, y-30), Point(x+50, y-30), Point(x+50, y-60), Point(x-50, y-60))
        front_wheel = Circle(Point(x-35, y+30), 20)
        back_wheel = Circle(Point(x+35, y+30), 20)

        front_wheel.setFill("black")
        back_wheel.setFill("black")
        rand_color = color_rgb(random.randint(0,150),random.randint(175,250), random.randint(125, 250))
        body.setFill(rand_color)
        top.setFill(rand_color)
        
        # list of all parts of the car
        self.part_lst = [back_wheel, top, body, front_wheel]

    # draws each part of the car in the window       
    def draw(self, window, x, y):
        
        for part in self.part_lst:
            part.draw(window)
            
    # makes the car move
    def move(self, dx, dy):

        # finds center of car
        center = self.part_lst[2].getCenter()
        x_center = center.getX()

        # moves car
        for part in self.part_lst:
            part.move(dx, dy)
            part.move(dx, -dy)

            # if the car gets too close to the end, it wraps to other side
            if x_center < 0 and dx < 0:
                part.move(1300, 0)

            if x_center > 1290 and dx > 0:
                part.move(-1300, 0)

    '''the class contains two getter functions to get and return the position
    of the car. It uses the body of the car to get the center.'''
    def get_x(self):

        center = self.part_lst[2].getCenter()
        x = center.getX()
        return x

    def get_y(self):

        center = self.part_lst[2].getCenter()
        y = center.getY()
        return y
       

def main():

    # holds the car objects
    upper_car_lst = []
    lower_car_lst = []

    # draws window
    win = GraphWin('Dogger', WIDTH, HEIGHT, autoflush=False)
    # draws road
    draw_road(win)

    # calls the banner class to create two banner
    banner = Banner("Points Earned:")
    banner2 = Banner("Lives Remaining:")

    # creates the beagle object using the beagle class
    # the banners get passed into the class to be updated
    beagle = Beagle(600, 560, banner, banner2)
    # draws banner and beagle
    beagle.create(win)
    banner.draw(win)

    # uses the Car class
    # creates the car objects for the upper car list
    for i in range(70, WIDTH, 300):
        y_position = int(HEIGHT * .3)
        car = Car(i, y_position)
        car.draw(win, i, y_position)
        upper_car_lst.append(car)

    # uses the Car class
    # creates the car objects for the lower car list
    for i in range(70, WIDTH, 300):
        y_position2 = int(HEIGHT * .5)
        car2 = Car(i, y_position2)
        car2.draw(win, i, y_position2)
        lower_car_lst.append(car2)
        
    # loop runs while the user still has lives
    while int(beagle.get_lives()) > 0:
        # moves the cars in the list
        for elem in upper_car_lst:
            elem.move(-1.75, 0)
            # checks for collisions and checks if beagle made it across
            beagle.collision(elem.get_x(), elem.get_y(), HEIGHT*0.6, win)
            beagle.across(win)

        for elem in lower_car_lst:
            elem.move(2.5, 0)
            beagle.collision(elem.get_x(), elem.get_y(), HEIGHT*0.4, win)
            beagle.across(win)
            
        update()

        # checks for user click
        click = win.checkMouse()
        # if user clicks, the beagle moves
        if click != None:
            beagle.beagle_move(click)

    # prints GAME OVER
    game_over = Text(Point(WIDTH/2, HEIGHT/2), "GAME OVER")
    game_over.setSize(30)
    game_over.draw(win)
    

main()
